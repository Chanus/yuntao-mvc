<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd" default-lazy-init="false">

  <context:component-scan base-package="com.chanus.yuntao.mvc.redis"/>

  <!-- 引入 redis 配置文件，这里要特别注意，如果有多个 properties 文件，必须用逗号分开，不能写成两个 <context:property-placeholder/> -->
  <!-- <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true" /> -->
  <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:redis.properties</value><!-- 如果是类路径下这样加载 -->
        <!--<value>/WEB-INF/redis.properties</value> --><!-- 如果是WEB-INF路径下这样加载 -->
      </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
  </bean>

  <!-- 配置 JedisPoolConfig 连接池 -->
  <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <!-- 最大连接数 -->
    <property name="maxTotal" value="${spring.redis.pool.maxTotal}"/>
    <!-- 最大空闲连接数 -->
    <property name="maxIdle" value="${spring.redis.pool.maxIdle}"/>
    <!-- 最小空闲连接数 -->
    <property name="minIdle" value="${spring.redis.pool.minIdle}"/>
    <!-- 做空闲资源检测时，每次的采样数，默认3，如果设置为-1，就是对所有连接做空闲监测 -->
    <property name="numTestsPerEvictionRun" value="1024"/>
    <!-- 释放连接的扫描间隔（毫秒） -->
    <property name="timeBetweenEvictionRunsMillis" value="30000"/>
    <!-- 连接最小空闲时间 -->
    <property name="minEvictableIdleTimeMillis" value="1800000"/>
    <!-- 连接空闲多久后释放, 当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
    <property name="softMinEvictableIdleTimeMillis" value="10000"/>
    <!-- 获取连接时的最大等待毫秒数，小于零：阻塞不确定的时间，默认-1 -->
    <property name="maxWaitMillis" value="${spring.redis.pool.maxWaitMillis}"/>
    <!-- 当调用 borrow Object 方法时，是否进行有效性检查，默认 false -->
    <property name="testOnBorrow" value="true"/>
    <!-- 当调用 return Object 方法时，是否进行有效性检查，默认 false -->
    <property name="testOnReturn" value="true"/>
    <!-- 在空闲时检查有效性，默认 false -->
    <property name="testWhileIdle" value="true"/>
    <!-- 连接耗尽时是否阻塞，false 报异常，ture 阻塞直到超时，默认 true -->
    <property name="blockWhenExhausted" value="true"/>
  </bean>

  <!-- 单片机方式，业务层主要通过该 bean 访问 redis 服务器 -->
  <!-- <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
    <constructor-arg index="0" name="poolConfig" ref="poolConfig" />
    <constructor-arg index="1" name="host" value="${spring.redis.host}" type="java.lang.String" />
    <constructor-arg index="2" name="port" value="${spring.redis.port}" type="int" />
    <constructor-arg index="3" name="timeout" value="${spring.redis.timeout}" type="int" />
    <constructor-arg index="4" name="password" value="${spring.redis.password}" type="java.lang.String" />
  </bean> -->

  <!-- redis 连接密码，在 spring-data-redis 2.0 以上的版本中在配置密码的时候不能像老版本直接设置密码值，需要注入一个 RedisPassword 的 bean 在 RedisPassword 的构造方法中设置密码 -->
  <bean id="redisPassword" class="org.springframework.data.redis.connection.RedisPassword">
    <constructor-arg name="thePassword" value="${spring.redis.password}"/>
  </bean>
  <!-- spring-data-redis 2.0 以上的配置 -->
  <bean id="redisStandaloneConfiguration"
        class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
    <property name="hostName" value="${spring.redis.host}"/>
    <property name="port" value="${spring.redis.port}"/>
    <property name="password" ref="redisPassword"/>
    <property name="database" value="${spring.redis.database}"/>
  </bean>

  <!-- 配置 jedis 连接工厂 -->
  <!-- spring-data-redis2.0 中建议改为构造器传入一个 RedisStandaloneConfiguration（单机），RedisSentinelConfiguration（主从复制），RedisClusterConfiguration（集群） -->
  <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
    <!-- 注销掉的部分为 spring-data-redis 2.0 以下的版本配置的方式  -->
    <!-- <property name="hostName" value="${spring.redis.host}"/> -->
    <!-- <property name="port" value="${spring.redis.port}"/> -->
    <!-- <property name="password" value="${spring.redis.password}"/> -->
    <!-- <property name="database" value="${spring.redis.database}"/> -->
    <property name="timeout" value="${spring.redis.timeout}"/>
    <property name="poolConfig" ref="jedisPoolConfig"/>
    <!-- usePool：是否使用连接池 -->
    <property name="usePool" value="true"/>
    <!-- spring-data-redis 2.0 以上建议获取的方式 -->
    <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
  </bean>

  <!-- SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。 StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。 
    RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。 就是因为序列化策略的不同，即使是同一个key用不同的Template去序列化，结果是不同的。
    所以根据key去删除数据的时候就出现了删除失败的问题。 -->
  <!-- redis 序列化策略 ，通常情况下key值采用String序列化策略，如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略。
    但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
  <!-- 配置 jedis 模板 RedisTemplate -->
  <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    <property name="connectionFactory" ref="jedisConnectionFactory"/>

    <!-- String -->
    <property name="keySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="valueSerializer">
      <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    </property>
    <!-- hash -->
    <property name="hashKeySerializer">
      <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    </property>
    <property name="hashValueSerializer">
      <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    </property>
    <!-- 开启事务 -->
    <property name="enableTransactionSupport" value="true"/>
  </bean>

  <!-- 定义缓存管理器 -->
  <!-- <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
    通过构造方法注入redisTemplate
    <constructor-arg name="redisOperations" ref="redisTemplate" />
    定义超时时间，单位秒
    <property name="defaultExpiration" value="${redis.expiration}" />
    支持事务
    <property name="transactionAware" value="true" />
    设置缓存器名称
    <property name="cacheNames">
      <list>
        <value>redisCacheManager</value>
      </list>
    </property>
  </bean> -->

  <!-- 定义缓存管理器redisCacheManager。 注意：cache-manager默认值是cacheManager，你的缓存管理器id要是命名是cacheManager，这里可以省略 -->
  <!-- 使用注解驱动 -->
  <!-- <cache:annotation-driven cache-manager="redisCacheManager" /> -->

  <!-- <cache:annotation-driven cache-manager="cacheManager" /> -->

  <!-- Spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
  <!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
    配置缓存区
    <property name="caches">
      <set>
        配置缓存区，这里可以配置多个
        <bean class="RedisCache">
          <property name="redisTemplate" ref="redisTemplate" />
          定义缓存区名称
          <property name="name" value="yuntaoCache" />
        </bean>
      </set>
    </property>
  </bean> -->

  <!-- 配置spring-session -->
  <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
    <!-- session过期时间，单位是秒 -->
    <property name="maxInactiveIntervalInSeconds" value="3600"/>
  </bean>

</beans>
