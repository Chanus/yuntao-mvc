<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd" default-lazy-init="false">

  <!-- 引入jdbc配置文件，这里要特别注意，如果有多个properties文件，必须用逗号分开，不能写成两个 <context:property-placeholder/> -->
  <!-- <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" /> -->
  <bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:jdbc.properties</value>
        <!-- <value>classpath:redis.properties</value> --><!-- 如果是类路径下这样加载 -->
        <!--<value>/WEB-INF/redis.properties</value> --><!-- 如果是WEB-INF路径下这样加载 -->
      </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
  </bean>

  <!--创建jdbc数据源 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- 数据库驱动 -->
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <!-- 数据库连接 -->
    <property name="url" value="${jdbc.url}"/>
    <!-- 账号 -->
    <property name="username" value="${jdbc.username}"/>
    <!-- 密码密文 -->
    <property name="password" value="${jdbc.password}"/>
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
    <property name="validationQuery" value="${jdbc.validationQuery}"/>
    <!-- 初始化连接数量 -->
    <property name="initialSize" value="${dataSource.initialSize}"/>
    <!-- 最大并发连接数 -->
    <property name="maxActive" value="${dataSource.maxActive}"/>
    <!-- 最小空闲连接数 -->
    <property name="minIdle" value="${dataSource.minIdle}"/>
    <!-- 获取连接等待超时的时间 -->
    <property name="maxWait" value="${dataSource.maxWait}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="300000"/>
    <!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
    <property name="testWhileIdle" value="true"/>
    <!-- 获取链接的时候，校验是否可用，开启会有损性能 -->
    <property name="testOnBorrow" value="false"/>
    <!-- 归还链接到连接池的时候校验链接是否可用 -->
    <property name="testOnReturn" value="false"/>
    <!-- 超过时间限制是否回收 -->
    <property name="removeAbandoned" value="true"/>
    <!-- 超过时间限制多长，1800秒 -->
    <property name="removeAbandonedTimeout" value="1800"/>
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="true"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
    <!-- 配置监控统计拦截的filters -->
    <property name="passwordCallback" ref="dbPasswordCallback"/>
    <!-- 通过别名的方式配置扩展插件：监控统计用的filter:stat；日志用的filter:log4j；防御sql注入的filter:wall -->
    <property name="filters" value="stat"/>
    <!-- 连接参数 -->
    <property name="connectionProperties" value="password=${jdbc.password};druid.stat.slowSqlMillis=5000"/>
  </bean>

  <!-- 解密数据库密码 -->
  <bean id="dbPasswordCallback" class="pers.chanus.yuntao.jdbc.security.DBPasswordCallback"/>

  <!-- 配置druid监控spring jdbc -->
  <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
  <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
    <property name="patterns">
      <list>
        <value>pers.chanus.yuntao.*.service.impl</value>
        <value>pers.chanus.yuntao.*.*.service.impl</value>
        <value>com.*.service.impl</value>
        <value>com.*.*.service.impl</value>
        <value>com.*.*.*.service.impl</value>
        <value>com.*.services.impl</value>
        <value>com.*.*.services.impl</value>
        <value>com.*.*.*.services.impl</value>
      </list>
    </property>
  </bean>
  <aop:config>
    <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
  </aop:config>

  <!-- 配置SqlSessionFactoryBean -->
  <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
  </bean> -->
  <!-- 集成 MyBatis-Plus，调整 SqlSessionFactory 为 MyBatis-Plus 的 SqlSessionFactory -->
  <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!-- 注入全局配置 -->
    <property name="globalConfig" ref="globalConfig"/>
    <!-- 配置插件 -->
    <property name="plugins">
      <array>
        <!-- 分页插件 -->
        <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor">
          <!-- COUNT SQL 解析.可以没有 -->
          <property name="countSqlParser" ref="countSqlParser"/>
        </bean>
      </array>
    </property>
  </bean>

  <!-- MyBatis-Plus 的全局策略配置 -->
  <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
    <property name="dbConfig" ref="dbConfig"/>
  </bean>

  <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
    <!-- 全局主键自增策略，AUTO 表示自增长 -->
    <property name="idType" value="AUTO"/>
    <property name="insertStrategy" value="NOT_EMPTY"/>
    <property name="updateStrategy" value="NOT_NULL"/>
    <property name="selectStrategy" value="NOT_EMPTY"/>
    <!-- 全局表前缀配置 -->
    <property name="tablePrefix" value="sys_"/>
  </bean>

  <bean id="countSqlParser" class="com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize">
    <!-- 设置为 true 可以优化部分 left join 的sql -->
    <property name="optimizeJoin" value="true"/>
  </bean>

  <!-- 使用JDBC事务 -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 使用annotation注解方式声明事务 -->
  <tx:annotation-driven/>

  <!-- 使用实现了某个接口的类让Spring来生成bean -->
  <aop:aspectj-autoproxy/>

  <!-- 配置Mybatis Mapper注册 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="**.mapper,pers.chanus.yuntao.server.syslog"/>
  </bean>

  <!-- 扫描Service -->
  <context:component-scan base-package="**.service.impl"/>
</beans>
